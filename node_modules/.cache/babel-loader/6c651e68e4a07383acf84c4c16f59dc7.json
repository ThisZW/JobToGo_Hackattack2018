{"ast":null,"code":"import _classCallCheck from \"/Users/zw/GitHub/JobToGo_Hackattack2018/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zw/GitHub/JobToGo_Hackattack2018/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/zw/GitHub/JobToGo_Hackattack2018/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/zw/GitHub/JobToGo_Hackattack2018/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/zw/GitHub/JobToGo_Hackattack2018/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/zw/GitHub/JobToGo_Hackattack2018/client/src/components/map.jsx\";\nimport React from 'react';\nimport { Col, Row } from 'antd';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\n/**\n * Facility Map\n */\n\nvar lng = 40.741669;\nvar lat = -73.820770;\nconsole.log(lng);\nconsole.log(lat);\n\nvar map =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(map, _React$Component);\n\n  function map(props) {\n    var _this;\n\n    _classCallCheck(this, map);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(map).call(this, props));\n\n    _this.componentWillMount = function () {\n      document.title = \"\";\n    };\n\n    _this.state = {\n      locations: []\n    };\n    return _this;\n  } //set page title\n\n\n  _createClass(map, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.loadMap(); // call loadMap function to load the google map\n\n      this.loadMarkers();\n    }\n  }, {\n    key: \"loadMarkers\",\n    value: function loadMarkers() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          google = _this$props.google,\n          locations = _this$props.locations; //console.log(locations);\n\n      locations.forEach(function (v, i) {\n        var index = i + 1;\n        var marker = new google.maps.Marker({\n          position: {\n            lat: parseFloat(v.latitude),\n            lng: parseFloat(v.longitude)\n          },\n          // sets position of marker to specified location\n          label: index.toString(),\n          map: _this2.map,\n          // sets markers to appear on the map we just created on line 35\n          title: v.hospital_name\n        });\n        marker.setMap(_this2.map);\n      });\n    }\n  }, {\n    key: \"loadMap\",\n    value: function loadMap() {\n      if (this.props && this.props.google) {\n        // checks to make sure that props have been passed\n        var google = this.props.google; // sets props equal to google\n\n        var maps = google.maps; // sets maps to google maps props\n\n        var mapRef = this.refs.map; // looks for HTML div ref 'map'. Returned in render below.\n\n        var node = ReactDOM.findDOMNode(mapRef); // finds the 'map' div in the React DOM, names it node\n\n        var centerNode = {\n          lat: parseFloat(lat),\n          lng: parseFloat(lng)\n        };\n        var mapConfig = Object.assign({}, {\n          center: centerNode,\n          zoom: 14,\n          // sets zoom. Lower numbers are zoomed further out.\n          mapTypeId: 'roadmap' // optional main map layer. Terrain, satellite, hybrid or roadmap--if unspecified, defaults to roadmap.\n\n        });\n        this.map = new maps.Map(node, mapConfig); // creates a new Google map on the specified node (ref='map') with the specified configuration set above.\n\n        var marker = new google.maps.Marker({\n          position: centerNode,\n          // sets position of marker to specified location\n          icon: {\n            url: \"/my_location.png\",\n            anchor: new google.maps.Point(32, 32),\n            scaledSize: new google.maps.Size(32, 32)\n          },\n          map: this.map // sets markers to appear on the map we just created on line 35\n\n        });\n        marker.setMap(this.map);\n        var trafficLayer = new google.maps.TrafficLayer();\n        trafficLayer.setMap(this.map);\n      }\n    }\n  }, {\n    key: \"loadExtras\",\n    value: function loadExtras() {//this.state.locations.forEach(location => { // iterate through locations saved in state\n\n      /*const marker = new google.maps.Marker({\n        position: {lat: location.latitude, lng: location.longitude}, // sets position of marker to specified location\n        map: this.map, // sets markers to appear on the map we just created on line 35\n        title: location.name // the title of the marker is set to the name of the location\n      });*/\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = {\n        // MUST specify dimensions of the Google map or it will not work. Also works best when style is specified inside the render function and created as an object\n        height: '75vh' // 75vh similarly will take up roughly 75% of the height of the screen. px also works.\n\n      };\n      return React.createElement(Row, {\n        style: {\n          padding: \"20px 0\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        ref: \"map\",\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"loading map...\")));\n    }\n  }]);\n\n  return map;\n}(React.Component);\n\nexport default withRouter(GoogleApiWrapper({\n  apiKey: \"AIzaSyDbvmQGBFexX5Dk0nbbVJ-sIq3QOtprm7M\"\n})(map));","map":{"version":3,"sources":["/Users/zw/GitHub/JobToGo_Hackattack2018/client/src/components/map.jsx"],"names":["React","Col","Row","Map","InfoWindow","Marker","GoogleApiWrapper","axios","withRouter","ReactDOM","lng","lat","console","log","map","props","componentWillMount","document","title","state","locations","loadMap","loadMarkers","google","forEach","v","i","index","marker","maps","position","parseFloat","latitude","longitude","label","toString","hospital_name","setMap","mapRef","refs","node","findDOMNode","centerNode","mapConfig","Object","assign","center","zoom","mapTypeId","icon","url","anchor","Point","scaledSize","Size","trafficLayer","TrafficLayer","style","height","padding","Component","apiKey"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,GAAb,QAAuB,MAAvB;AACA,SAAQC,GAAR,EAAaC,UAAb,EAAyBC,MAAzB,EAAiCC,gBAAjC,QAAwD,mBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,QAAP,MAAqB,WAArB;AAGA;;;;AAGA,IAAMC,GAAG,GAAG,SAAZ;AACA,IAAMC,GAAG,GAAG,CAAC,SAAb;AACAC,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAE,OAAO,CAACC,GAAR,CAAYF,GAAZ;;IACMG,G;;;;;AAEJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;;AADiB,UAMnBC,kBANmB,GAME,YAAM;AACzBC,MAAAA,QAAQ,CAACC,KAAT,GAAiB,EAAjB;AACD,KARkB;;AAEjB,UAAKC,KAAL,GAAa;AAACC,MAAAA,SAAS,EAAE;AAAZ,KAAb;AAFiB;AAGlB,G,CAED;;;;;yCAKqB;AACnB,WAAKC,OAAL,GADmB,CACH;;AAChB,WAAKC,WAAL;AACD;;;kCAEY;AAAA;;AAAA,wBACiB,KAAKP,KADtB;AAAA,UACJQ,MADI,eACJA,MADI;AAAA,UACIH,SADJ,eACIA,SADJ,EAEX;;AACAA,MAAAA,SAAS,CAACI,OAAV,CAAmB,UAACC,CAAD,EAAIC,CAAJ,EAAS;AAC1B,YAAIC,KAAK,GAAGD,CAAC,GAAC,CAAd;AACA,YAAIE,MAAM,GAAE,IAAIL,MAAM,CAACM,IAAP,CAAYxB,MAAhB,CAAuB;AACjCyB,UAAAA,QAAQ,EAAE;AAACnB,YAAAA,GAAG,EAAEoB,UAAU,CAACN,CAAC,CAACO,QAAH,CAAhB;AACAtB,YAAAA,GAAG,EAAEqB,UAAU,CAACN,CAAC,CAACQ,SAAH;AADf,WADuB;AAGtB;AACXC,UAAAA,KAAK,EAAEP,KAAK,CAACQ,QAAN,EAJ0B;AAKjCrB,UAAAA,GAAG,EAAE,MAAI,CAACA,GALuB;AAKlB;AACfI,UAAAA,KAAK,EAAEO,CAAC,CAACW;AANwB,SAAvB,CAAZ;AAQAR,QAAAA,MAAM,CAACS,MAAP,CAAc,MAAI,CAACvB,GAAnB;AACD,OAXD;AAYD;;;8BAES;AACR,UAAI,KAAKC,KAAL,IAAc,KAAKA,KAAL,CAAWQ,MAA7B,EAAqC;AAAE;AAAF,YAC5BA,MAD4B,GAClB,KAAKR,KADa,CAC5BQ,MAD4B,EACN;;AAC7B,YAAMM,IAAI,GAAGN,MAAM,CAACM,IAApB,CAFmC,CAET;;AAE1B,YAAMS,MAAM,GAAG,KAAKC,IAAL,CAAUzB,GAAzB,CAJmC,CAIL;;AAC9B,YAAM0B,IAAI,GAAG/B,QAAQ,CAACgC,WAAT,CAAqBH,MAArB,CAAb,CALmC,CAKQ;;AAE3C,YAAMI,UAAU,GAAG;AAAC/B,UAAAA,GAAG,EAAEoB,UAAU,CAACpB,GAAD,CAAhB;AAAuBD,UAAAA,GAAG,EAAEqB,UAAU,CAACrB,GAAD;AAAtC,SAAnB;AAEA,YAAMiC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAClCC,UAAAA,MAAM,EAAEJ,UAD0B;AAElCK,UAAAA,IAAI,EAAE,EAF4B;AAExB;AACVC,UAAAA,SAAS,EAAE,SAHuB,CAGb;;AAHa,SAAlB,CAAlB;AAMA,aAAKlC,GAAL,GAAW,IAAIe,IAAI,CAAC1B,GAAT,CAAaqC,IAAb,EAAmBG,SAAnB,CAAX,CAfmC,CAeO;;AAE1C,YAAIf,MAAM,GAAE,IAAIL,MAAM,CAACM,IAAP,CAAYxB,MAAhB,CAAuB;AACjCyB,UAAAA,QAAQ,EAAEY,UADuB;AACX;AACtBO,UAAAA,IAAI,EAAE;AACJC,YAAAA,GAAG,EAAE,kBADD;AAEJC,YAAAA,MAAM,EAAE,IAAI5B,MAAM,CAACM,IAAP,CAAYuB,KAAhB,CAAsB,EAAtB,EAAyB,EAAzB,CAFJ;AAGJC,YAAAA,UAAU,EAAE,IAAI9B,MAAM,CAACM,IAAP,CAAYyB,IAAhB,CAAqB,EAArB,EAAwB,EAAxB;AAHR,WAF2B;AAOjCxC,UAAAA,GAAG,EAAE,KAAKA,GAPuB,CAOlB;;AAPkB,SAAvB,CAAZ;AASAc,QAAAA,MAAM,CAACS,MAAP,CAAc,KAAKvB,GAAnB;AAEA,YAAIyC,YAAY,GAAG,IAAIhC,MAAM,CAACM,IAAP,CAAY2B,YAAhB,EAAnB;AACAD,QAAAA,YAAY,CAAClB,MAAb,CAAoB,KAAKvB,GAAzB;AACD;AACF;;;iCAEW,CACV;;AACE;;;;;AAKH;;;6BAGQ;AACP,UAAM2C,KAAK,GAAG;AAAE;AACdC,QAAAA,MAAM,EAAE,MADI,CACG;;AADH,OAAd;AAGA,aACE,oBAAC,GAAD;AAAK,QAAA,KAAK,EAAE;AACVC,UAAAA,OAAO,EAAE;AADC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,GAAG,EAAC,KAAT;AAAe,QAAA,KAAK,EAAEF,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CAHF,CADF;AAWD;;;;EA7FezD,KAAK,CAAC4D,S;;AAgGxB,eAAepD,UAAU,CAACF,gBAAgB,CAAC;AACzCuD,EAAAA,MAAM,EAAE;AADiC,CAAD,CAAhB,CAEvB/C,GAFuB,CAAD,CAAzB","sourcesContent":["import React from 'react';\nimport {Col, Row} from 'antd';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport axios from 'axios'\nimport { withRouter } from 'react-router-dom'\nimport ReactDOM from 'react-dom'\n\n\n/**\n * Facility Map\n */\nconst lng = 40.741669\nconst lat = -73.820770\nconsole.log(lng)\nconsole.log(lat)\nclass map extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {locations: []}; \n  }\n\n  //set page title\n  componentWillMount = () => {\n    document.title = \"\"\n  }\n\n  componentDidUpdate() {\n    this.loadMap(); // call loadMap function to load the google map\n    this.loadMarkers();\n  }\n\n  loadMarkers(){\n    const {google, locations} = this.props;\n    //console.log(locations);\n    locations.forEach( (v, i) =>{\n      var index = i+1;\n      var marker =new google.maps.Marker({\n        position: {lat: parseFloat(v.latitude), \n                  lng: parseFloat(v.longitude),\n                }, // sets position of marker to specified location\n        label: index.toString(),\n        map: this.map, // sets markers to appear on the map we just created on line 35\n        title: v.hospital_name,\n      });\n      marker.setMap(this.map);\n    })\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) { // checks to make sure that props have been passed\n      const {google} = this.props; // sets props equal to google\n      const maps = google.maps; // sets maps to google maps props\n\n      const mapRef = this.refs.map; // looks for HTML div ref 'map'. Returned in render below.\n      const node = ReactDOM.findDOMNode(mapRef); // finds the 'map' div in the React DOM, names it node\n\n      const centerNode = {lat: parseFloat(lat), lng: parseFloat(lng)};\n\n      const mapConfig = Object.assign({}, {\n        center: centerNode,\n        zoom: 14, // sets zoom. Lower numbers are zoomed further out.\n        mapTypeId: 'roadmap' // optional main map layer. Terrain, satellite, hybrid or roadmap--if unspecified, defaults to roadmap.\n      })\n\n      this.map = new maps.Map(node, mapConfig); // creates a new Google map on the specified node (ref='map') with the specified configuration set above.\n  \n      var marker =new google.maps.Marker({\n        position: centerNode, // sets position of marker to specified location\n        icon: {\n          url: \"/my_location.png\",\n          anchor: new google.maps.Point(32,32),\n          scaledSize: new google.maps.Size(32,32),\n        },\n        map: this.map, // sets markers to appear on the map we just created on line 35\n      });\n      marker.setMap(this.map);\n\n      var trafficLayer = new google.maps.TrafficLayer();\n      trafficLayer.setMap(this.map);\n    }\n  }\n\n  loadExtras(){\n    //this.state.locations.forEach(location => { // iterate through locations saved in state\n      /*const marker = new google.maps.Marker({\n        position: {lat: location.latitude, lng: location.longitude}, // sets position of marker to specified location\n        map: this.map, // sets markers to appear on the map we just created on line 35\n        title: location.name // the title of the marker is set to the name of the location\n      });*/\n  }\n  \n\n  render() {\n    const style = { // MUST specify dimensions of the Google map or it will not work. Also works best when style is specified inside the render function and created as an object\n      height: '75vh' // 75vh similarly will take up roughly 75% of the height of the screen. px also works.\n    }\n    return (\n      <Row style={{\n        padding: \"20px 0\"\n      }}>\n        <Col md={12}>\n          <div ref=\"map\" style={style}>\n            loading map...\n          </div>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default withRouter(GoogleApiWrapper({\n  apiKey: \"AIzaSyDbvmQGBFexX5Dk0nbbVJ-sIq3QOtprm7M\",\n})(map))"]},"metadata":{},"sourceType":"module"}