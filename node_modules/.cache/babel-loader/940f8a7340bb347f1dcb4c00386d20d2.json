{"ast":null,"code":"import _classCallCheck from \"/Users/zw/GitHub/JobToGo_Hackattack2018/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zw/GitHub/JobToGo_Hackattack2018/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/zw/GitHub/JobToGo_Hackattack2018/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/zw/GitHub/JobToGo_Hackattack2018/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/zw/GitHub/JobToGo_Hackattack2018/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/zw/GitHub/JobToGo_Hackattack2018/client/src/components/map.jsx\";\nimport React, { Component } from 'react';\nimport { Col, Row } from 'antd';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport { withRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\n/**\n * Facility Map\n */\n\nvar lat = 40.741669;\nvar lng = -73.820770;\nconsole.log(lng);\nconsole.log(lat);\n\nvar MiniMap =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MiniMap, _React$Component);\n\n  function MiniMap(props) {\n    var _this;\n\n    _classCallCheck(this, MiniMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MiniMap).call(this, props));\n\n    _this.componentWillMount = function () {\n      document.title = \"\";\n    };\n\n    _this.state = {\n      locations: []\n    };\n    return _this;\n  } //set page title\n\n\n  _createClass(MiniMap, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(MapContainer, {\n        google: this.props.google,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return MiniMap;\n}(React.Component);\n\nvar MapContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapContainer, _Component);\n\n  function MapContainer() {\n    _classCallCheck(this, MapContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MapContainer).apply(this, arguments));\n  }\n\n  _createClass(MapContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadMap(); // call loadMap function to load the google map\n\n      this.loadMarkers();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.loadMap(); // call loadMap function to load the google map\n\n      this.loadMarkers();\n    }\n  }, {\n    key: \"loadMarkers\",\n    value: function loadMarkers() {\n      var google = this.props.google; //console.log(locations);\n\n      /*locations.forEach( (v, i) =>{\n        var index = i+1;\n        var marker =new google.maps.Marker({\n          position: {lat: parseFloat(v.latitude), \n                    lng: parseFloat(v.longitude),\n                  }, // sets position of marker to specified location\n          label: index.toString(),\n          map: this.map, // sets markers to appear on the map we just created on line 35\n          title: v.hospital_name,\n        });\n        marker.setMap(this.map);\n      })*/\n    }\n  }, {\n    key: \"loadMap\",\n    value: function loadMap() {\n      if (this.props && this.props.google) {\n        // checks to make sure that props have been passed\n        var google = this.props.google; // sets props equal to google\n\n        var maps = google.maps; // sets maps to google maps props\n\n        var mapRef = this.refs.map; // looks for HTML div ref 'map'. Returned in render below.\n\n        var node = ReactDOM.findDOMNode(mapRef); // finds the 'map' div in the React DOM, names it node\n\n        var centerNode = {\n          lat: parseFloat(lat),\n          lng: parseFloat(lng)\n        };\n        var mapConfig = Object.assign({}, {\n          center: centerNode,\n          zoom: 14,\n          // sets zoom. Lower numbers are zoomed further out.\n          mapTypeId: 'roadmap' // optional main map layer. Terrain, satellite, hybrid or roadmap--if unspecified, defaults to roadmap.\n\n        });\n        this.map = new maps.Map(node, mapConfig); // creates a new Google map on the specified node (ref='map') with the specified configuration set above.\n\n        var marker = new google.maps.Marker({\n          position: centerNode,\n          // sets position of marker to specified location\n          icon: {\n            url: \"/my_location.png\",\n            anchor: new google.maps.Point(24, 24),\n            scaledSize: new google.maps.Size(24, 24)\n          },\n          map: this.map // sets markers to appear on the map we just created on line 35\n\n        });\n        marker.setMap(this.map);\n        var trafficLayer = new google.maps.TrafficLayer();\n        trafficLayer.setMap(this.map);\n      }\n    }\n  }, {\n    key: \"loadExtras\",\n    value: function loadExtras() {//this.state.locations.forEach(location => { // iterate through locations saved in state\n\n      /*const marker = new google.maps.Marker({\n        position: {lat: location.latitude, lng: location.longitude}, // sets position of marker to specified location\n        map: this.map, // sets markers to appear on the map we just created on line 35\n        title: location.name // the title of the marker is set to the name of the location\n      });*/\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = {\n        // MUST specify dimensions of the Google map or it will not work. Also works best when style is specified inside the render function and created as an object\n        height: '300px' // 75vh similarly will take up roughly 75% of the height of the screen. px also works.\n\n      };\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        ref: \"map\",\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"loading map...\"));\n    }\n  }]);\n\n  return MapContainer;\n}(Component);\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyDbvmQGBFexX5Dk0nbbVJ-sIq3QOtprm7M\"\n})(MiniMap);","map":{"version":3,"sources":["/Users/zw/GitHub/JobToGo_Hackattack2018/client/src/components/map.jsx"],"names":["React","Component","Col","Row","Map","InfoWindow","Marker","GoogleApiWrapper","withRouter","ReactDOM","lat","lng","console","log","MiniMap","props","componentWillMount","document","title","state","locations","google","MapContainer","loadMap","loadMarkers","maps","mapRef","refs","map","node","findDOMNode","centerNode","parseFloat","mapConfig","Object","assign","center","zoom","mapTypeId","marker","position","icon","url","anchor","Point","scaledSize","Size","setMap","trafficLayer","TrafficLayer","style","height","apiKey"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Col, Row} from 'antd';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport { withRouter } from 'react-router-dom'\nimport ReactDOM from 'react-dom'\n\n\n/**\n * Facility Map\n */\nconst lat = 40.741669\nconst lng = -73.820770\nconsole.log(lng)\nconsole.log(lat)\n\nclass MiniMap extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {locations: []}; \n  }\n\n  //set page title\n  componentWillMount = () => {\n    document.title = \"\"\n  }\n  \n  render(){\n    return(\n      <MapContainer\n        google={this.props.google}\n      />\n    )\n  }\n}\n\nclass MapContainer extends Component{\n  componentDidMount() {\n    this.loadMap(); // call loadMap function to load the google map\n    this.loadMarkers();\n  }\n\n  componentDidUpdate(){\n      this.loadMap(); // call loadMap function to load the google map\n      this.loadMarkers();\n  }\n  loadMarkers(){\n    const {google} = this.props;\n    //console.log(locations);\n    /*locations.forEach( (v, i) =>{\n      var index = i+1;\n      var marker =new google.maps.Marker({\n        position: {lat: parseFloat(v.latitude), \n                  lng: parseFloat(v.longitude),\n                }, // sets position of marker to specified location\n        label: index.toString(),\n        map: this.map, // sets markers to appear on the map we just created on line 35\n        title: v.hospital_name,\n      });\n      marker.setMap(this.map);\n    })*/\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) { // checks to make sure that props have been passed\n      const {google} = this.props; // sets props equal to google\n      const maps = google.maps; // sets maps to google maps props\n\n      const mapRef = this.refs.map; // looks for HTML div ref 'map'. Returned in render below.\n      const node = ReactDOM.findDOMNode(mapRef); // finds the 'map' div in the React DOM, names it node\n\n      const centerNode = {lat: parseFloat(lat), lng: parseFloat(lng)};\n\n      const mapConfig = Object.assign({}, {\n        center: centerNode,\n        zoom: 14, // sets zoom. Lower numbers are zoomed further out.\n        mapTypeId: 'roadmap' // optional main map layer. Terrain, satellite, hybrid or roadmap--if unspecified, defaults to roadmap.\n      })\n\n      this.map = new maps.Map(node, mapConfig); // creates a new Google map on the specified node (ref='map') with the specified configuration set above.\n  \n      var marker =new google.maps.Marker({\n        position: centerNode, // sets position of marker to specified location\n        icon: {\n          url: \"/my_location.png\",\n          anchor: new google.maps.Point(24,24),\n          scaledSize: new google.maps.Size(24,24),\n        },\n        map: this.map, // sets markers to appear on the map we just created on line 35\n      });\n      marker.setMap(this.map);\n\n      var trafficLayer = new google.maps.TrafficLayer();\n      trafficLayer.setMap(this.map);\n    }\n  }\n\n  loadExtras(){\n    //this.state.locations.forEach(location => { // iterate through locations saved in state\n      /*const marker = new google.maps.Marker({\n        position: {lat: location.latitude, lng: location.longitude}, // sets position of marker to specified location\n        map: this.map, // sets markers to appear on the map we just created on line 35\n        title: location.name // the title of the marker is set to the name of the location\n      });*/\n  }\n  \n\n  render() {\n    const style = { // MUST specify dimensions of the Google map or it will not work. Also works best when style is specified inside the render function and created as an object\n      height: '300px' // 75vh similarly will take up roughly 75% of the height of the screen. px also works.\n    }\n    return (\n      <Row>\n          <div ref=\"map\" style={style}>\n            loading map...\n          </div>\n      </Row>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyDbvmQGBFexX5Dk0nbbVJ-sIq3QOtprm7M\",\n})(MiniMap)\n"]},"metadata":{},"sourceType":"module"}